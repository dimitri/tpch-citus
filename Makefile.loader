TOP := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# Those are meant to be filled-in by the tpch.py driver
# It's still possible to hack them around directly, of course
SF      ?= 10
C       ?= 100
S       ?= 1
DSN     ?= postgresql://tpch@localhost:5432/TPCH
STREAM  ?= 1

TPCH_PG  = $(TOP)/tpch-pg/
TPCH_SRC = $(TOP)/tpch-pg/src/
QUERIES  = ../queries/
DBGEN    = ./dbgen
QGEN     = DSS_QUERY=$(QUERIES) ./qgen
PSQL     = psql -X -a -d $(DSN)

PACKAGES = git htop tmux emacs postgresql96* python36 python36-devel python36-pip
TABLES   = nation, region, part, supplier, partsupp, customer, orders, lineitem
VTABLES  = nation region part supplier partsupp customer orders lineitem

all: os repo ;

os:
	sudo yum -q -y groupinstall "Development Tools"
	sudo yum -q -y install $(PACKAGES)
	sudo localedef -i en_US -f UTF-8 en_US.UTF-8
	./scripts/install-local-pgsql.sh
	psql -v ON_ERROR_STOP=1 -f schema/tracking.sql -d tpch-results

tools:
	sudo pip-3.6 install -r requirements.txt
	make -C $(TPCH_SRC) clean all

schema:
	$(PSQL) -f $(TOP)/$(SCHEMA)

constraints:
	$(PSQL) -f schema/tpch-pkeys.sql
	$(PSQL) -f schema/tpch-index.sql
	$(PSQL) -f schema/tpch-alter.sql

vacuum:
	$(PSQL) -c '\timing' -f schema/tpch-vacuum.sql

load:
	# load the next Step of data
	cd $(TPCH_SRC) && $(DBGEN) -s $(SF) -C $(C) -S $(S) -D -n $(DSN)

cardinalities:
	$(PSQL) -c '\timing' -c 'TABLE cardinalities;'

stream:
	cd $(TPCH_SRC) && $(QGEN) $(STREAM)             \
	| $(PSQL) -o /dev/null -c '\timing' -f -

refresh:
	cd $(TPCH_SRC) && $(DBGEN) -s $(SF) -U $(C) -S $(S) -D -n $(DSN) -v

drop:
	$(PSQL) -c 'drop table $(TABLES) cascade;'

.PHONY: dbgen repo os load stream refresh drop
.PHONY: schema constraints vacuum
